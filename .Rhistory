# proper number of stars (if any)
if(type == 'm' | type == 'both'){
M <- max(v) # The maximum value in 'v' is Leemis M
names(M) <- 'Leemis M:' # Adds correct name to one-element vector
M <- ifelse(M < 0.851, M, # This ifelse chain appends the proper stars
ifelse(M < 0.967, M <- paste0(M, '*'),
ifelse(M < 1.212, M <- paste0(M, '**'),
M <- paste0(M, '***'))))
}
if(type == 'd' | type == 'both'){
D <- sqrt(sum(v^2))
# Cho-Gains D is the sqrt of the squared elements
names(D) <- 'Cho-Gains D:' # Adds correct name to one-element vector
D <- ifelse(D < 1.212, D, # This ifelse chain appends the proper stars
ifelse(D < 1.330, D <- paste0(D, '*'),
ifelse(D < 1.569, D <- paste0(D, '**'),
D <- paste0(D, '***'))))
}
# Legend to indicate meaning of significance stars
sig <- "* indicates p<0.10, ** indicates p<0.05, *** indicates p<0.01"
# Switch stores the desired test results as an object
result <- switch(type, m=c(M, sig), d=c(D, sig), both=c(D, M, sig))
# Then we return the results with the legend
return(list(results=cat(paste(names(result), result), sep='\n'),
dist=data))
}
violation_test(rep(1, 100), type='both') # Examples
##################################################
##                                              ##
## Problem Set 2                                ##
## David Miller                                 ##
##                                              ##
##################################################
## Function used to calculate Leemis' M and/or Cho-Gains' D, given a matrix or
## a vector of vote totals.  Function returns Leemis' M if type 'm', Cho-Gains'
## D if type 'd,' and both statistics if type 'both.'
## The following function returns Leemis' M if its argument 'type' equals
## 'm' (which is its default value), Cho-Gains' D if 'type' equals 'd',
## or both if 'type' equals 'both'; the statistic is reported with one star
## if it is statistically reliable at an alpha level of 0.1, two stars for
## alpha level 0.05, and three stars for alpha level 0.01.
violation_test <- function(x, type='m'){
# First, we take the data x, convert the numeric values to strings, and
# remove all but the first character in each string.  Then, table()
# tabulates the number of occurrences by each value.  Each total is divided
# by length(x) to give the proportion of occurrences for each, and we subtract
# log10(1 + 1/1:9)
data <- table(substr(as.character(x), 1, 1))/length(x)
v <- data - log10(1 + 1/1:9)
# Leemis M is the default test; if the user specifies 'm,' 'both,' or nothing,
# the function calculates Leemis M, names the statistic, and attaches the
# proper number of stars (if any)
if(type == 'm' | type == 'both'){
M <- max(v) # The maximum value in 'v' is Leemis M
names(M) <- 'Leemis M:' # Adds correct name to one-element vector
M <- ifelse(M < 0.851, M, # This ifelse chain appends the proper stars
ifelse(M < 0.967, M <- paste0(M, '*'),
ifelse(M < 1.212, M <- paste0(M, '**'),
M <- paste0(M, '***'))))
}
if(type == 'd' | type == 'both'){
D <- sqrt(sum(v^2))
# Cho-Gains D is the sqrt of the squared elements
names(D) <- 'Cho-Gains D:' # Adds correct name to one-element vector
D <- ifelse(D < 1.212, D, # This ifelse chain appends the proper stars
ifelse(D < 1.330, D <- paste0(D, '*'),
ifelse(D < 1.569, D <- paste0(D, '**'),
D <- paste0(D, '***'))))
}
# Legend to indicate meaning of significance stars
sig <- "* indicates p<0.10, ** indicates p<0.05, *** indicates p<0.01"
# Switch stores the desired test results as an object
result <- switch(type, m=c(M, sig), d=c(D, sig), both=c(D, M, sig))
# Then we return the results with the legend
return(list(results=cat(paste(names(result), result), sep='\n'),
dist=data[1:9]))
}
violation_test(rep(1, 100), type='both') # Examples
data
data[1:9]
data[1]
violation_test <- function(x, type='m'){
# First, we take the data x, convert the numeric values to strings, and
# remove all but the first character in each string.  Then, table()
# tabulates the number of occurrences by each value.  Each total is divided
# by length(x) to give the proportion of occurrences for each
data <- table(substr(as.character(x), 1, 1))/length(x)
# because we want these proportions to be returned by the list outputted by
# the function, we store it as part of a list
final_list <- list('Proportions' = data)
# we subtract log10(1 + 1/1:9) to generate the inside statistic for each test
v <- data - log10(1 + 1/1:9)
# Leemis M is the default test; if the user specifies 'm,' 'both,' or nothing,
# the function calculates Leemis M, names the statistic, and attaches the
# proper number of stars (if any)
if(type == 'm' | type == 'both'){
M <- max(v) # The maximum value in 'v' is Leemis M
final_list$Leemis <- M
#names(M) <- 'Leemis M:' # Adds correct name to one-element vector
#M <- ifelse(M < 0.851, M, # This ifelse chain appends the proper stars
#            ifelse(M < 0.967, M <- paste0(M, '*'),
#                   ifelse(M < 1.212, M <- paste0(M, '**'),
#                          M <- paste0(M, '***'))))
}
if(type == 'd' | type == 'both'){
D <- sqrt(sum(v^2))
final_list$CG_D <- D
# Cho-Gains D is the sqrt of the squared elements
#names(D) <- 'Cho-Gains D:' # Adds correct name to one-element vector
#D <- ifelse(D < 1.212, D, # This ifelse chain appends the proper stars
#            ifelse(D < 1.330, D <- paste0(D, '*'),
#                   ifelse(D < 1.569, D <- paste0(D, '**'),
#                          D <- paste0(D, '***'))))
}
# Legend to indicate meaning of significance stars
#sig <- "* indicates p<0.10, ** indicates p<0.05, *** indicates p<0.01"
# Switch stores the desired test results as an object
#result <- switch(type, m=c(M, sig), d=c(D, sig), both=c(D, M, sig))
# Then we return the results with the legend
#return(list(results=cat(paste(names(result), result), sep='\n'),
#dist=data[1:9]))
return(final_list)
}
violation_test(rep(1, 100), type='both') # Examples
violation_test(seq(from=1, to=100, by=1), type='both') # Examples
violation_test <- function(x, type='m'){
# First, we take the data x, convert the numeric values to strings, and
# remove all but the first character in each string.  Then, table()
# tabulates the number of occurrences by each value.  Each total is divided
# by length(x) to give the proportion of occurrences for each
data <- table(as.factor(substr(as.character(x), 1, 1))/length(x))
# because we want these proportions to be returned by the list outputted by
# the function, we store it as part of a list
final_list <- list('Proportions' = data)
# we subtract log10(1 + 1/1:9) to generate the inside statistic for each test
v <- data - log10(1 + 1/1:9)
# Leemis M is the default test; if the user specifies 'm,' 'both,' or nothing,
# the function calculates Leemis M, names the statistic, and attaches the
# proper number of stars (if any)
if(type == 'm' | type == 'both'){
M <- max(v) # The maximum value in 'v' is Leemis M
final_list$Leemis <- M
#names(M) <- 'Leemis M:' # Adds correct name to one-element vector
#M <- ifelse(M < 0.851, M, # This ifelse chain appends the proper stars
#            ifelse(M < 0.967, M <- paste0(M, '*'),
#                   ifelse(M < 1.212, M <- paste0(M, '**'),
#                          M <- paste0(M, '***'))))
}
if(type == 'd' | type == 'both'){
D <- sqrt(sum(v^2))
final_list$CG_D <- D
# Cho-Gains D is the sqrt of the squared elements
#names(D) <- 'Cho-Gains D:' # Adds correct name to one-element vector
#D <- ifelse(D < 1.212, D, # This ifelse chain appends the proper stars
#            ifelse(D < 1.330, D <- paste0(D, '*'),
#                   ifelse(D < 1.569, D <- paste0(D, '**'),
#                          D <- paste0(D, '***'))))
}
# Legend to indicate meaning of significance stars
#sig <- "* indicates p<0.10, ** indicates p<0.05, *** indicates p<0.01"
# Switch stores the desired test results as an object
#result <- switch(type, m=c(M, sig), d=c(D, sig), both=c(D, M, sig))
# Then we return the results with the legend
#return(list(results=cat(paste(names(result), result), sep='\n'),
#dist=data[1:9]))
return(final_list)
}
violation_test(seq(from=1, to=100, by=1), type='both') # Examples
violation_test <- function(x, type='m'){
# First, we take the data x, convert the numeric values to strings, and
# remove all but the first character in each string.  Then, table()
# tabulates the number of occurrences by each value.  Each total is divided
# by length(x) to give the proportion of occurrences for each
data <- table(as.factor(substr(as.character(x), 1, 1))/length(x))
# because we want these proportions to be returned by the list outputted by
# the function, we store it as part of a list
final_list <- list('Proportions' = data)
# we subtract log10(1 + 1/1:9) to generate the inside statistic for each test
v <- as.numeric(data) - log10(1 + 1/1:9)
# Leemis M is the default test; if the user specifies 'm,' 'both,' or nothing,
# the function calculates Leemis M, names the statistic, and attaches the
# proper number of stars (if any)
if(type == 'm' | type == 'both'){
M <- max(v) # The maximum value in 'v' is Leemis M
final_list$Leemis <- M
#names(M) <- 'Leemis M:' # Adds correct name to one-element vector
#M <- ifelse(M < 0.851, M, # This ifelse chain appends the proper stars
#            ifelse(M < 0.967, M <- paste0(M, '*'),
#                   ifelse(M < 1.212, M <- paste0(M, '**'),
#                          M <- paste0(M, '***'))))
}
if(type == 'd' | type == 'both'){
D <- sqrt(sum(v^2))
final_list$CG_D <- D
# Cho-Gains D is the sqrt of the squared elements
#names(D) <- 'Cho-Gains D:' # Adds correct name to one-element vector
#D <- ifelse(D < 1.212, D, # This ifelse chain appends the proper stars
#            ifelse(D < 1.330, D <- paste0(D, '*'),
#                   ifelse(D < 1.569, D <- paste0(D, '**'),
#                          D <- paste0(D, '***'))))
}
# Legend to indicate meaning of significance stars
#sig <- "* indicates p<0.10, ** indicates p<0.05, *** indicates p<0.01"
# Switch stores the desired test results as an object
#result <- switch(type, m=c(M, sig), d=c(D, sig), both=c(D, M, sig))
# Then we return the results with the legend
#return(list(results=cat(paste(names(result), result), sep='\n'),
#dist=data[1:9]))
return(final_list)
}
violation_test(seq(from=1, to=100, by=1), type='both') # Examples
data <- table(as.factor(substr(as.character(x), 1, 1)))
data
final_list <- list('Proportions' = data)
final_list$Proportions
length(data)
length(sum)
sum(data)
violation_test <- function(x, type='m'){
# First, we take the data x, convert the numeric values to strings, and
# remove all but the first character in each string.  Then, table()
# tabulates the number of occurrences by each value.  Each total is divided
# by length(x) to give the proportion of occurrences for each
data <- table(as.factor(substr(as.character(x), 1, 1)))
# because we want these proportions to be returned by the list outputted by
# the function, we store it as part of a list
final_list <- list('Proportions' = data)
# we subtract log10(1 + 1/1:9) to generate the inside statistic for each test
v <- as.numeric(data)/sum(data) - log10(1 + 1/1:9)
# Leemis M is the default test; if the user specifies 'm,' 'both,' or nothing,
# the function calculates Leemis M, names the statistic, and attaches the
# proper number of stars (if any)
if(type == 'm' | type == 'both'){
M <- max(v) # The maximum value in 'v' is Leemis M
final_list$Leemis <- M
#names(M) <- 'Leemis M:' # Adds correct name to one-element vector
#M <- ifelse(M < 0.851, M, # This ifelse chain appends the proper stars
#            ifelse(M < 0.967, M <- paste0(M, '*'),
#                   ifelse(M < 1.212, M <- paste0(M, '**'),
#                          M <- paste0(M, '***'))))
}
if(type == 'd' | type == 'both'){
D <- sqrt(sum(v^2))
final_list$CG_D <- D
# Cho-Gains D is the sqrt of the squared elements
#names(D) <- 'Cho-Gains D:' # Adds correct name to one-element vector
#D <- ifelse(D < 1.212, D, # This ifelse chain appends the proper stars
#            ifelse(D < 1.330, D <- paste0(D, '*'),
#                   ifelse(D < 1.569, D <- paste0(D, '**'),
#                          D <- paste0(D, '***'))))
}
# Legend to indicate meaning of significance stars
#sig <- "* indicates p<0.10, ** indicates p<0.05, *** indicates p<0.01"
# Switch stores the desired test results as an object
#result <- switch(type, m=c(M, sig), d=c(D, sig), both=c(D, M, sig))
# Then we return the results with the legend
#return(list(results=cat(paste(names(result), result), sep='\n'),
#dist=data[1:9]))
return(final_list)
}
violation_test(seq(from=1, to=100, by=1), type='both') # Examples
violation_test(rep(1, 100), type='d')
data <- table(factor(substr(as.character(x), 1, 1), levels = 1:9))
violation_test <- function(x, type='m'){
# First, we take the data x, convert the numeric values to strings, and
# remove all but the first character in each string.  Then, table()
# tabulates the number of occurrences by each value.  Each total is divided
# by length(x) to give the proportion of occurrences for each
data <- table(factor(substr(as.character(x), 1, 1), levels = 1:9))
# because we want these proportions to be returned by the list outputted by
# the function, we store it as part of a list
final_list <- list('Proportions' = data)
# we subtract log10(1 + 1/1:9) to generate the inside statistic for each test
v <- as.numeric(data)/sum(data) - log10(1 + 1/1:9)
# Leemis M is the default test; if the user specifies 'm,' 'both,' or nothing,
# the function calculates Leemis M, names the statistic, and attaches the
# proper number of stars (if any)
if(type == 'm' | type == 'both'){
M <- max(v) # The maximum value in 'v' is Leemis M
final_list$Leemis <- M
#names(M) <- 'Leemis M:' # Adds correct name to one-element vector
#M <- ifelse(M < 0.851, M, # This ifelse chain appends the proper stars
#            ifelse(M < 0.967, M <- paste0(M, '*'),
#                   ifelse(M < 1.212, M <- paste0(M, '**'),
#                          M <- paste0(M, '***'))))
}
if(type == 'd' | type == 'both'){
D <- sqrt(sum(v^2))
final_list$CG_D <- D
# Cho-Gains D is the sqrt of the squared elements
#names(D) <- 'Cho-Gains D:' # Adds correct name to one-element vector
#D <- ifelse(D < 1.212, D, # This ifelse chain appends the proper stars
#            ifelse(D < 1.330, D <- paste0(D, '*'),
#                   ifelse(D < 1.569, D <- paste0(D, '**'),
#                          D <- paste0(D, '***'))))
}
# Legend to indicate meaning of significance stars
#sig <- "* indicates p<0.10, ** indicates p<0.05, *** indicates p<0.01"
# Switch stores the desired test results as an object
#result <- switch(type, m=c(M, sig), d=c(D, sig), both=c(D, M, sig))
# Then we return the results with the legend
#return(list(results=cat(paste(names(result), result), sep='\n'),
#dist=data[1:9]))
return(final_list)
}
violation_test(seq(from=1, to=100, by=1), type='both') # Examples
violation_test(rep(1, 100), type='d')
length(data)
data <- (1,0,0,0,0,0,0,0,0)
data <- c(1,0,0,0,0,0,0,0,0)
v <- as.numeric(data)/sum(data) - log10(1 + 1/1:9)
violation_test(rep(1, 100))
install.packages(eha)
install.packages("eha)
""
)
//
}
}}}}}}}}}}}
{}
quit
quit()
exit()
stop()
## Note some of this has been re-written to avoid deprecated methods.
rm(list=ls())
setClass('Squares',
slots=c(square='numeric', x='numeric', y='numeric')
)
setValidity("Squares",
function(object){
added <- object@x^2+object@y^2
subtracted <- object@x^2-object@y^2
test1 <- all(object@square==added)
test2 <- all(object@square==subtracted)
if(!test1 & !test2){
return("@square is not a valid value")
}
}
)
setMethod("initialize",
"Squares",
function(.Object, ...) {
value = callNextMethod()
validObject(value)
return(value)
}
)
# Examples:
new("Squares", square=13, x=3, y=2)
# new("Squares", square="turtle", x=30, y=20)
# new("Squares", square=14, x=3, y=2)
setGeneric("getSquares",
function(object="Squares"){
standardGeneric("getSquares")
}
)
# @export
setMethod("getSquares",
"Squares",
function(object){
return(object@square)
}
)
myObject <- new("Squares", square=13, x=3, y=2)
getSquares(myObject)
setGeneric("setsquare<-",
function(object, value){
standardGeneric("setsquare<-")
}
)
setReplaceMethod(
f="setsquare",
signature="Squares",
definition=function(object,value){
object@square<-value
validObject(object)
return(object)
}
)
## Example
setsquare(myObject) <- 13
# setsquare(myObject) <- 14
setGeneric('addSquares',
function(x, y){
standardGeneric('addSquares')
}
)
setMethod('addSquares',
'numeric',
function(x, y){
return(new('Squares', square=x^2 + y^2, x=x, y=y))
}
)
setGeneric('subtractSquares',
function(x, y){
standardGeneric('subtractSquares')
}
)
setMethod('subtractSquares',
'numeric',
function(x, y){
return(new('Squares', square=x^2 - y^2, x=x, y=y))
}
)
addSquares(1, 2)
subtractSquares(1, 2)
setMethod('show',
'Squares',
function(object){
if(object@square==object@x^2 + object@y^2){
last <- paste0('The sum of x^2 and y^2 is ', object@square)
}
if(object@square==object@x^2 - object@y^2){
last <- paste0('The difference of x^2 and y^2 is ', object@square)
}
cat('x = ', object@x, '\n', 'y = ', object@y, '\n', last, sep='')
}
)
myObject
addSquares(1, 2)
subtractSquares(1, 2)
setMethod('plot',
'Squares',
function(x){
X <- 1:3; Y <- c(x@x, x@y, x@square)
plot(x=X, y=Y, xaxt='n', ylab='Value', xlab='Element')
axis(side=1, at=X, labels=c('x', 'y', 'square'))
}
)
plot(myObject)
door <- function(x){ # initializing function to create door object
if(length(x)==1 & x %in% c(1,2,3)){ # if statement evaluating whether the input is of
# length one AND if the input is 1, 2, or 3
structure(as.vector(x), class="door")
# if the input meets the conditions,
} else {
stop("User must select only one of the following numeric door values: 1, 2, or 3")
}
}
a <- door(1)
door <- function(x){ # initializing function to create door object
if(length(x)==1 & x %in% c(1,2,3)){ # if statement evaluating whether the input is of
# length one AND if the input is 1, 2, or 3
structure(x, class="door")
# if the input meets the conditions,
} else {
stop("User must select only one of the following numeric door values: 1, 2, or 3")
}
}
a <- door(1)
rm(a)
a <- door(1)
setwd("C:\\Users\\drmiller1220\\Documents\\GitHub\\PS3")
source('DoorS3.R')
source('PlayGameS3.R')
source('PlayGameDefaultS3.R')
source('PlayGameDoorS3.R')
# creating objects for each possible door
door1 <- door(1)
door2 <- door(2)
door3 <- door(3)
# failing to create door objects for inputs which are not single integers
doorz <- door("z")
PlayGame(door1)
PlayGame(door2)
PlayGame(door3)
PlayGame(door1)
PlayGame(door2)
PlayGame(door3)
door_matrix <- door(as.matrix(1:10, 2))
matrix(1:10, 2)
setwd("C:\\Users\\drmiller1220\\Documents\\GitHub\\PS3")
source('DoorS3.R')
source('PlayGameS3.R')
source('PlayGameDefaultS3.R')
source('PlayGameDoorS3.R')
# creating objects for each possible door
door1 <- door(1)
door2 <- door(2)
door3 <- door(3)
# failing to create door objects for inputs which are not single integers
doorz <- door("z")
##
door_vector <- door(c(1,2,4,4))
door_matrix <- door(matrix(1:10, 2))
# play let's make a deal with door objects
PlayGame(door1)
PlayGame(door2)
PlayGame(door3)
PlayGame("z")
PlayGame(c(1,25,32,535))
PlayGame(matrix(1:9,3))
setwd("C:\\Users\\drmiller1220\\Documents\\GitHub\\PS3")
source('DoorS4.R')
source('PlayGameS4.R')
# creating objects for each possible door
door1 <- new("door", door=1)
door2 <- new("door", door=2)
door3 <- new("door", door=3)
# failing to create door objects for inputs which are not single integers
doorz <- new("door", door="z")
door_vector <- new("door", door=c(3,65,1,23))
# play let's make a deal with door objects
PlayGame(door1)
PlayGame(door2)
PlayGame(door3)
# failing to play let's make a deal with non-door objects
PlayGame("z")
PlayGame(c(1,25,32,535))
PlayGame(matrix(1:9,3))
PlayGame(matrix(1:9,3))
